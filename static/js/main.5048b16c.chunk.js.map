{"version":3,"sources":["components/Store.tsx","components/tools/Dropzone.tsx","components/hooks/useInput.ts","components/hooks/useField.ts","components/editor/Field.tsx","components/ui/Button.tsx","components/editor/NewField.tsx","components/editor/FieldBlock.tsx","components/editor/Editor.tsx","components/tools/Toolbar.tsx","components/tools/exporter.ts","components/App.tsx","index.tsx"],"names":["initialState","data","undefined","filename","mode","Store","React","createContext","reducer","state","action","type","payload","Dropzone","props","onDrop","accept","errors","isLoading","useDropzone","getRootProps","getInputProps","styles","isDragActive","container","border","outline","width","height","display","flexFlow","justifyContent","textAlign","dropzone","cursor","style","className","padding","color","maxWidth","margin","useInput","initialValue","useState","inputVal","setInputVal","handleInputChange","e","currentTarget","value","getColorForValue","isNaN","inferTypeFromString","unstringifyValue","parseFloat","useField","parentKeys","inputColor","setFieldColor","useContext","dispatch","handleFieldUpdate","newData","target","i","length","handleAddNewField","field","Array","isArray","push","name","Field","isArrayItem","lineHeight","label","overflow","textOverflow","input","paddingLeft","backgroundColor","minWidth","borderRadius","FelaComponent","title","onChange","onBlur","Button","createComponent","fontFamily","fontSize","size","NewField","setField","form","onSubmit","preventDefault","placeholder","required","defaultValue","FieldBlock","isLastItem","showBorder","isCollapsed","setCollapsed","handleClick","fieldBlock","position","borderLeft","blockLabel","blockIndex","brackets","keys","Object","FieldBlockContainer","bracket","onClick","children","map","key","parentLength","Editor","setIsLoading","setErrors","handleFileSelect","useCallback","acceptedFiles","file","reader","FileReader","onload","JSON","parse","result","error","console","toString","readAsText","flex","boxShadow","scrollbarColor","marginTop","Toolbar","Blob","stringify","window","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","handleExportData","App","alignItems","renderer","createRenderer","ReactDOM","render","RendererProvider","useReducer","Provider","getElementById"],"mappings":"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","file":"static/js/main.5048b16c.chunk.js","sourcesContent":["import React, { useReducer, useContext } from 'react'\n\ninterface IAction {\n  type: string\n  payload: any\n}\n\ninterface IState {\n  data: any\n  mode: string\n  filename: string\n}\n\nexport const initialState: IState = {\n  data: undefined,\n  filename: '',\n  mode: 'normal'\n}\n\nexport const Store = React.createContext<IState | any>(initialState)\n\nexport const reducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case 'SET_NAME':\n      return { ...state, filename: action.payload }\n    case 'CHANGE_DATA':\n      return { ...state, data: action.payload }\n    case 'CHANGE_MODE':\n      return { ...state, mode: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const StoreProvider = (props: any): JSX.Element => {\n  const state = useReducer(reducer, initialState)\n  return <Store.Provider value={state}>{props.children}</Store.Provider>\n}\n","import React from 'react'\nimport { useDropzone } from 'react-dropzone'\n\nconst Dropzone = (props: any) => {\n  const { onDrop, accept, errors, isLoading } = props\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept\n  })\n\n  const styles = {\n    container: {\n      border: '5px dashed gray',\n      outline: 'none',\n      width: '100%',\n      height: '90%',\n      display: 'flex',\n      flexFlow: 'column',\n      justifyContent: 'center',\n      textAlign: 'center' as const\n    },\n    dropzone: {\n      cursor: 'pointer'\n    }\n  }\n  return (\n    <div style={styles.container} {...getRootProps()}>\n      <div style={styles.dropzone} className='dropzone-content'>\n        <input className='dropzone-input' {...getInputProps()} />\n        Drag-and-Drop a JSON file here or click to select file\n        <div style={{ padding: '3em' }}>\n          <i className='huge upload icon'></i>\n        </div>\n        {errors ? (\n          <div style={{ color: 'red', maxWidth: '50%', margin: '0 auto' }}>\n            {errors}\n          </div>\n        ) : (\n          <>{isLoading && <span>Importing file...</span>}</>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Dropzone\n","import React, { useState } from 'react'\n\nconst useInput = (initialValue = undefined) => {\n  const [inputVal, setInputVal] = useState<any>(initialValue)\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    setInputVal(e.currentTarget.value)\n  }\n\n  return {\n    inputVal,\n    handleInputChange\n  }\n}\n\nexport default useInput\n","import React, { useState, useContext } from 'react'\nimport useInput from './useInput'\nimport { Store } from '../Store'\n\nexport type ValueType = any\n\n// Returns typeof given value based on its type or inferred type from if string\nconst inferTypeFromString = (value: any) => {\n  if (value === 'true' || value === 'false' || typeof value === 'boolean')\n    return 'boolean'\n  else if (!isNaN(value) || typeof value === 'number') return 'number'\n  else return 'string'\n}\n\n// Returns color based on value's type of either string, number, or boolean\nconst getColorForValue = (value: any) => {\n  const type = inferTypeFromString(value)\n  let color = '#ce824a'\n  switch (type) {\n    case 'string':\n      break\n    case 'number':\n      color = '#b5cea8'\n      break\n    case 'boolean':\n      color = '#358cd6'\n      break\n    default:\n      break\n  }\n  return color\n}\n\n// Returns literal value of given string (number or boolean)\nconst unstringifyValue = (value: ValueType) => {\n  if (!isNaN(value)) return isNaN(parseFloat(value)) ? value : parseFloat(value)\n  else if (value === 'true') return true\n  else if (value === 'false') return false\n  else return value\n}\n\nconst useField = (\n  parentKeys: string[],\n  initialValue: ValueType = undefined\n) => {\n  const { inputVal, handleInputChange } = useInput(initialValue)\n  const [inputColor, setFieldColor] = useState<string>(\n    getColorForValue(inputVal)\n  )\n  const [state, dispatch] = useContext(Store)\n\n  const handleFieldUpdate = () => {\n    // Update color based on type\n    setFieldColor(getColorForValue(inputVal))\n\n    // Update store\n    let newData = state.data\n    let target = newData\n\n    for (let i = 0; i < parentKeys.length - 1; i++) {\n      target = target[parentKeys[i]]\n    }\n    //stackoverflow.com/questions/56297351/how-to-use-shouldcomponentupdate-with-react-hooks/56297625\n\n    https: target[parentKeys[parentKeys.length - 1]] = unstringifyValue(\n      inputVal\n    )\n\n    dispatch({ type: 'CHANGE_DATA', payload: newData })\n  }\n\n  const handleAddNewField = (field: any) => {\n    // Update store\n    let newData = state.data\n    let target = newData\n\n    for (let i = 0; i < parentKeys.length; i++) {\n      target = target[parentKeys[i]]\n    }\n\n    let inputVal: any\n    switch (field.type) {\n      case 'value':\n        inputVal = ''\n        break\n      case 'object':\n        inputVal = {}\n        break\n      case 'array':\n        inputVal = []\n        break\n      default:\n        inputVal = ''\n        break\n    }\n\n    // If parent is array, add to it\n    if (Array.isArray(target)) {\n      target.push(inputVal)\n    } else {\n      // Initialize empty array if newly created\n      if (field.type === 'array') {\n        target[field.name] = []\n      } else {\n        target[field.name] = inputVal\n      }\n    }\n\n    dispatch({ type: 'CHANGE_DATA', payload: newData })\n  }\n\n  return {\n    inputVal,\n    handleInputChange,\n    handleFieldUpdate,\n    handleAddNewField,\n    inputColor\n  }\n}\n\nexport default useField\n","import React from 'react'\nimport { FelaComponent } from 'react-fela'\nimport useField, { ValueType } from '../hooks/useField'\n\ntype FieldProps = {\n  name: string\n  value: any\n  parentKeys: string[]\n  isArrayItem: boolean\n}\n\nconst Field = (props: FieldProps) => {\n  const { name, value, isArrayItem, parentKeys } = props\n  const {\n    inputVal,\n    inputColor,\n    handleInputChange,\n    handleFieldUpdate\n  } = useField(parentKeys, value)\n\n  const styles = {\n    field: {\n      display: 'flex',\n      height: '1.5em',\n      lineHeight: '1.5em'\n    },\n    label: {\n      display: 'inline-block',\n      color: `${isArrayItem ? '#c586c0' : '#9cdcfe'}`,\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    },\n    input: {\n      paddingLeft: '0.3em',\n      backgroundColor: '#333333',\n      minWidth: '33%',\n      color: `${inputColor}`,\n      border: '1px solid #202020',\n      borderRadius: '3px',\n      outline: 'none'\n    }\n  }\n\n  return (\n    <FelaComponent style={styles.field}>\n      <span title={name} style={styles.label}>{`${name}: `}</span>\n      <input\n        style={styles.input}\n        type='text'\n        onChange={handleInputChange}\n        onBlur={handleFieldUpdate}\n        value={inputVal}\n        name={name}\n      />\n    </FelaComponent>\n  )\n}\n\nexport default Field\n","import { createComponent } from 'react-fela'\n\nconst button = (props: any) => ({\n  color: 'white',\n  fontFamily: 'sans-serif',\n  fontSize: props.size === 'small' ? '0.9em' : '1.1em',\n  height: props.size === 'small' ? '1.75em' : '3em',\n  textAlign: 'center' as const,\n  backgroundColor: props.color || '#555',\n  border: '3px solid #222',\n  outline: 'none',\n  borderRadius: '6px',\n  ':hover': {\n    backgroundColor: props.color || '#666',\n    cursor: 'pointer'\n  }\n})\n\nconst Button = createComponent(button, 'button', ['onClick'])\n\nexport default Button\n","import React, { useState } from 'react'\nimport useField from '../hooks/useField'\nimport Button from '../ui/Button'\nimport { isArray } from 'util'\n\ntype NewFieldProps = {\n  parentKeys: string[]\n  isArrayItem: boolean\n}\n\nconst NewField = (props: NewFieldProps) => {\n  const { parentKeys, isArrayItem } = props\n  const [field, setField] = useState({ name: '', type: '' })\n  const { handleAddNewField } = useField(parentKeys)\n\n  const handleInputChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    setField({ ...field, [e.currentTarget.name]: e.currentTarget.value })\n  }\n\n  const styles = {\n    form: {\n      paddingLeft: '1.25em'\n    },\n    input: {\n      paddingLeft: '0.3em',\n      backgroundColor: '#333',\n      border: '1px solid #202020',\n      borderRadius: '3px',\n      outline: 'none',\n      height: '1.5em'\n    }\n  }\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        handleAddNewField(field)\n      }}\n      style={styles.form}\n    >\n      {!isArrayItem && (\n        <input\n          style={{ ...styles.input, color: '#9cdcfe' }}\n          name='name'\n          type='text'\n          value={field.name}\n          onChange={handleInputChange}\n          placeholder='new field'\n          required\n        />\n      )}\n      <select\n        style={{ ...styles.input, color: 'white' }}\n        name='type'\n        value={field.type}\n        onChange={handleInputChange}\n        defaultValue='value'\n      >\n        <option value='value'>value</option>\n        <option value='array'>array</option>\n        <option value='object'>object</option>\n      </select>\n      <Button size='small'>\n        <i className='check icon green'></i>\n      </Button>\n    </form>\n  )\n}\n\nexport default NewField\n","import React, { useState } from 'react'\nimport { FelaComponent, createComponent } from 'react-fela'\nimport Field from './Field'\nimport NewField from './NewField'\nimport Button from '../ui/Button'\nimport { isArray } from 'util'\n\ntype FieldBlockProps = {\n  name: string\n  field: any\n  isArrayItem: boolean\n  isLastItem: boolean\n  showBorder?: boolean\n  parentLength: number\n  mode: string\n  parentKeys: string[] // An array of keys to keep track of which portion of data\n}\n\nconst FieldBlock = (props: FieldBlockProps) => {\n  const {\n    field,\n    name,\n    mode,\n    parentKeys,\n    isArrayItem,\n    isLastItem,\n    showBorder = true\n  } = props\n  const [isCollapsed, setCollapsed] = useState(false)\n\n  const handleClick = () => {\n    setCollapsed(!isCollapsed)\n  }\n\n  const styles = {\n    fieldBlock: {\n      position: 'relative' as const,\n      paddingLeft: '1.25em',\n      borderLeft: `${showBorder ? '1px solid #454545' : 'none'}`,\n      ':hover': {\n        backgroundColor: 'rgba(100,100,100,0.05)'\n      }\n    },\n    blockLabel: {\n      ':hover': {\n        cursor: 'pointer'\n      },\n      height: '1.5em',\n      lineHeight: '1.5em',\n      color: '#9cdcfe'\n    },\n    blockIndex: {\n      ':hover': {\n        cursor: 'pointer'\n      },\n      color: '#c586c0'\n    },\n    brackets: {\n      color: 'white'\n    }\n  }\n\n  // Wraps label and block in brackets depending on object type\n  const BracketsWrapper = (props: any) => {\n    const bracket = Array.isArray(props.field) ? ['[', ']'] : ['{', '}']\n\n    return (\n      <>\n        <FelaComponent\n          style={isArrayItem ? styles.blockIndex : styles.blockLabel}\n        >\n          <div onClick={handleClick}>\n            {name}\n            <span style={styles.brackets}>: {bracket[0]}</span>\n            {isCollapsed && (\n              <span style={styles.brackets}>\n                &#8230;\n                {bracket[1] + (isLastItem ? '' : ',')}\n              </span>\n            )}\n          </div>\n        </FelaComponent>\n        {props.children}\n        {!isCollapsed && (\n          <span style={styles.brackets}>\n            {bracket[1] + (isLastItem ? '' : ',')}\n          </span>\n        )}\n      </>\n    )\n  }\n\n  //console.log(field)\n  const keys = Object.keys(field)\n\n  const FieldBlockContainer = createComponent(styles.fieldBlock, 'div', [\n    'onMouseOver',\n    'onMouseLeave'\n  ])\n\n  return (\n    <FieldBlockContainer style={styles.fieldBlock}>\n      {typeof field === 'object' ? (\n        <BracketsWrapper field={field}>\n          {!isCollapsed && (\n            <>\n              {keys.map((key, i) => {\n                return (\n                  <FieldBlock\n                    key={i}\n                    name={key}\n                    mode={mode}\n                    parentKeys={[...parentKeys, key]}\n                    parentLength={keys.length}\n                    isArrayItem={Array.isArray(field)}\n                    isLastItem={keys.length - 1 === i}\n                    field={field[key]}\n                  />\n                )\n              })}\n              {mode === 'edit' && (\n                <NewField\n                  isArrayItem={Array.isArray(field)}\n                  parentKeys={parentKeys}\n                />\n              )}\n            </>\n          )}\n        </BracketsWrapper>\n      ) : (\n        <Field\n          name={name}\n          value={field}\n          isArrayItem={isArrayItem}\n          parentKeys={parentKeys}\n        />\n      )}\n    </FieldBlockContainer>\n  )\n}\n\nexport default FieldBlock\n","import React, { useState, useContext, useCallback } from 'react'\nimport Dropzone from '../tools/Dropzone'\nimport FieldBlock from './FieldBlock'\nimport Button from '../ui/Button'\nimport { Store } from '../Store'\nimport NewField from './NewField'\nimport { FelaComponent } from 'react-fela'\n\nconst Editor = () => {\n  const [state, dispatch] = useContext(Store)\n  const [isLoading, setIsLoading] = useState(false)\n  const [errors, setErrors] = useState('')\n\n  const handleFileSelect = useCallback(acceptedFiles => {\n    setErrors('')\n    setIsLoading(true)\n\n    acceptedFiles.map((file: any) => {\n      const reader = new FileReader()\n\n      reader.onload = (file => (e: any) => {\n        try {\n          // Set data and filename in store\n          let data = JSON.parse(e.target.result)\n          dispatch({ type: 'SET_NAME', payload: file.name })\n          dispatch({ type: 'CHANGE_DATA', payload: data })\n          setIsLoading(false)\n        } catch (error) {\n          console.error(error)\n          setErrors(error.toString())\n        }\n      })(file)\n\n      reader.readAsText(file)\n    })\n  }, [])\n\n  const handleCreateNewClick = () => {\n    dispatch({ type: 'CHANGE_DATA', payload: {} })\n    dispatch({ type: 'CHANGE_MODE', payload: 'edit' })\n  }\n\n  const style = {\n    padding: '1em',\n    flex: '1 1 auto',\n    minWidth: '60%',\n    overflow: 'auto',\n    backgroundColor: '#1e1e1e',\n    boxShadow: 'inset 0 0 5px #101010',\n    borderRadius: '5px',\n    fontSize: '16px',\n    scrollbarColor: '#2e2e2e #1e1e1e',\n    '@media (max-width: 1024px)': {\n      width: '100%'\n    }\n  }\n\n  return (\n    <FelaComponent style={style}>\n      {!state.data ? (\n        <>\n          <Dropzone\n            isLoading={isLoading}\n            errors={errors}\n            onDrop={handleFileSelect}\n            accept='application/json'\n          />\n          <div style={{ textAlign: 'center', marginTop: '1em' }}>\n            <Button onClick={handleCreateNewClick}>Create New JSON</Button>\n          </div>\n        </>\n      ) : (\n        <>\n          {Object.keys(state.data).map((key, i) => {\n            const field = state.data[key]\n            return (\n              <FieldBlock\n                key={i}\n                name={key}\n                parentKeys={[key]}\n                parentLength={Object.keys(state.data).length}\n                isArrayItem={false}\n                isLastItem={Object.keys(state.data).length - 1 === i}\n                showBorder={false}\n                mode={state.mode}\n                field={field}\n              />\n            )\n          })}\n          {state.mode === 'edit' && (\n            <NewField isArrayItem={false} parentKeys={[]} />\n          )}\n        </>\n      )}\n    </FelaComponent>\n  )\n}\n\nexport default Editor\n","import React, { useContext } from 'react'\nimport { FelaComponent } from 'react-fela'\nimport { Store } from '../Store'\nimport { handleExportData } from './exporter'\nimport Button from '../ui/Button'\n\nconst Toolbar = () => {\n  const [state, dispatch] = useContext(Store)\n  const { data, filename } = state\n\n  const style = {\n    width: '100%',\n    flex: '0 1 50px',\n    display: 'flex',\n    justifyContent: 'center'\n  }\n\n  return (\n    <FelaComponent style={style}>\n      <Button\n        color={state.mode === 'normal' ? '#999' : null}\n        onClick={() => dispatch({ type: 'CHANGE_MODE', payload: 'normal' })}\n      >\n        <i className='eye icon'></i>\n        Normal View\n      </Button>\n      <Button\n        color={state.mode === 'edit' ? '#999' : null}\n        onClick={() => dispatch({ type: 'CHANGE_MODE', payload: 'edit' })}\n      >\n        <i className='pencil icon'></i>\n        Edit View\n      </Button>\n      <Button color='green' onClick={() => handleExportData(data, filename)}>\n        <i className='download icon'></i>\n        Export JSON\n      </Button>\n    </FelaComponent>\n  )\n}\n\nexport default Toolbar\n","export const handleExportData = (data: any, filename: string) => {\n  const file = new Blob([JSON.stringify(data, null, 2)], {\n    type: 'application/json'\n  })\n  if (window.navigator.msSaveOrOpenBlob)\n    // IE10+\n    window.navigator.msSaveOrOpenBlob(file, filename)\n  else {\n    // Others\n    let a = document.createElement('a'),\n      url = URL.createObjectURL(file)\n    a.href = url\n    a.download = filename\n    document.body.appendChild(a)\n    a.click()\n    setTimeout(() => {\n      document.body.removeChild(a)\n      window.URL.revokeObjectURL(url)\n    }, 0)\n  }\n}\n","import React, { useContext, useEffect } from 'react'\n\nimport Editor from './editor/Editor'\nimport { Store } from './Store'\nimport Toolbar from './tools/Toolbar'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useContext(Store)\n\n  const style = {\n    fontFamily: 'Consolas,monaco,monospace',\n    display: 'flex',\n    flexFlow: 'column',\n    padding: '0.5em',\n    width: '100vw',\n    height: '100vh',\n    alignItems: 'center',\n    color: 'white'\n  }\n\n  return (\n    <div style={style}>\n      <Editor />\n      {state.data && <Toolbar />}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { RendererProvider } from 'react-fela'\nimport { createRenderer } from 'fela'\nimport { StoreProvider } from './components/Store'\nimport App from './components/App'\nimport './index.css'\n\nconst renderer = createRenderer()\n\nReactDOM.render(\n  <RendererProvider renderer={renderer}>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </RendererProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}